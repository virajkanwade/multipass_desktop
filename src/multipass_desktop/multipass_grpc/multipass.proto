// Copyright Â© 2017-2020 Canonical Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";
package multipass;

service Rpc {
    rpc create (LaunchRequest) returns (stream LaunchReply);
    rpc launch (LaunchRequest) returns (stream LaunchReply);
    rpc purge (PurgeRequest) returns (stream PurgeReply);
    rpc find (FindRequest) returns (stream FindReply);
    rpc info (InfoRequest) returns (stream InfoReply);
    rpc list (ListRequest) returns (stream ListReply);
    rpc networks (NetworksRequest) returns (stream NetworksReply);
    rpc mount (MountRequest) returns (stream MountReply);
    rpc ping (PingRequest) returns (PingReply);
    rpc recover (RecoverRequest) returns (stream RecoverReply);
    rpc ssh_info (SSHInfoRequest) returns (stream SSHInfoReply);
    rpc start (StartRequest) returns (stream StartReply);
    rpc stop (StopRequest) returns (stream StopReply);
    rpc suspend (SuspendRequest) returns (stream SuspendReply);
    rpc restart (RestartRequest) returns (stream RestartReply);
    rpc delet (DeleteRequest) returns (stream DeleteReply);
    rpc umount (UmountRequest) returns (stream UmountReply);
    rpc version (VersionRequest) returns (stream VersionReply);
}

message OptInStatus {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        LATER = 2;
        ACCEPTED = 3;
        DENIED = 4;
    }
    Status opt_in_status = 1;
}

message LaunchRequest {
    string instance_name = 1;
    string image = 2;
    string kernel_name = 3;
    int32 num_cores = 4;
    string mem_size = 5; // units?
    string disk_space = 6; // units?
    string time_zone = 7;
    string cloud_init_user_data = 8;
    string remote_name = 9;
    OptInStatus opt_in_reply = 10;
    int32 verbosity_level = 11;

    message NetworkOptions {
        enum Mode {
            AUTO = 0;
            MANUAL = 1;
        }

        string id = 1;
        Mode mode = 2;
        string mac_address = 3;
    }
    repeated NetworkOptions network_options = 12;
}

message LaunchError {
    enum ErrorCodes {
        OK = 0;
        INSTANCE_EXISTS = 1;
        INVALID_MEM_SIZE = 2;
        INVALID_DISK_SIZE = 3;
        INVALID_HOSTNAME = 4;
        INVALID_NETWORK = 5;
    }
    repeated ErrorCodes error_codes = 1;
}

message LaunchProgress {
    enum ProgressTypes {
        IMAGE = 0;
        KERNEL = 1;
        INITRD = 2;
        EXTRACT = 3;
        VERIFY = 4;
        WAITING = 5;
    }
    ProgressTypes type = 1;
    string percent_complete = 2;
}

message MetricsShowInfo {
    // TODO: Place holder for real host data
    message HostInfo {
        string release = 1;
    }
    // TODO: Place holder for real instance data
    message InstanceInfo {
        string release = 1;
    }
    HostInfo host_info = 1;
    repeated InstanceInfo instances_info = 2;
}

message UpdateInfo {
    string version = 1;
    string url = 2;
    string title = 3;
    string description = 4;
}

message LaunchReply {
    oneof create_oneof {
        string vm_instance_name = 1;
        LaunchProgress launch_progress = 2;
        string create_message = 3;
    }
    bool metrics_pending = 4;
    MetricsShowInfo metrics_show_info = 5;
    string log_line = 6;
    UpdateInfo update_info = 7;
    string reply_message = 8;
}

message PurgeRequest {
    int32 verbosity_level = 1;
}

message PurgeReply {
    string log_line = 1;
}

message FindRequest {
    string search_string = 1;
    string remote_name = 2;
    int32 verbosity_level = 3;
    bool allow_unsupported = 4;
}

message FindReply {
    message AliasInfo {
        string remote_name = 1;
        string alias = 2;
    }
    message ImageInfo {
        string os = 1;
        string release = 2;
        string version = 3;
        repeated AliasInfo aliases_info = 4;
    }
    repeated ImageInfo images_info = 1;
    string log_line = 2;
}

message InstanceNames {
    repeated string instance_name = 1;
}

message InfoRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message MountMaps {
    map<int32, int32> uid_map = 1;
    map<int32, int32> gid_map = 2;
}

message MountInfo {
    message MountPaths {
        string source_path = 1;
        string target_path = 2;
        MountMaps mount_maps = 3;
    }
    uint32 longest_path_len = 1;
    repeated MountPaths mount_paths = 2;
}

message InstanceStatus {
    enum Status {
        UNKNOWN = 0;
        RUNNING = 1;
        STARTING = 2;
        RESTARTING = 3;
        STOPPED = 4;
        DELETED = 5;
        DELAYED_SHUTDOWN = 6;
        SUSPENDING = 7;
        SUSPENDED = 8;
    }
    Status status = 1;
}

message InfoReply {
    message Info {
        string name = 1;
        InstanceStatus instance_status = 2;
        string image_release = 3;
        string current_release = 4;
        string id = 5;
        string load = 6;
        string memory_usage = 7;
        string memory_total = 8;
        string disk_usage = 9;
        string disk_total = 10;
        repeated string ipv4 = 11;
        repeated string ipv6 = 12;
        MountInfo mount_info = 13;
    }
    repeated Info info = 1;
    string log_line = 2;
}

message ListRequest {
    int32 verbosity_level = 1;
    bool request_ipv4 = 2;
}

message ListVMInstance {
    string name = 1;
    InstanceStatus instance_status = 2;
    repeated string ipv4 = 3;
    repeated string ipv6 = 4;
    string current_release = 5;
}

message ListReply {
    repeated ListVMInstance instances = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}


message NetworksRequest {
    int32 verbosity_level = 1;
}

message NetInterface {
    string name = 1;
    string type = 2;
    string description = 3;
}

message NetworksReply {
    repeated NetInterface interfaces = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}

message TargetPathInfo {
    string instance_name = 1;
    string target_path = 2;
}

message MountRequest {
    string source_path = 1;
    repeated TargetPathInfo target_paths = 2;
    MountMaps mount_maps = 3;
    int32 verbosity_level = 4;
}

message MountReply {
    string log_line = 1;
    string mount_message = 2;
}

message PingRequest {
}

message PingReply {
}

message RecoverRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message RecoverReply {
    string log_line = 1;
}

message SSHInfoRequest {
    repeated string instance_name = 1;
    int32 verbosity_level = 2;
}

message SSHInfo {
    int32 port = 1;
    string priv_key_base64 = 2;
    string host = 3;
    string username = 4;
}

message SSHInfoReply {
    map<string, SSHInfo> ssh_info = 1;
    string log_line = 2;
}

message StartError {
    enum ErrorCode {
        OK = 0;
        DOES_NOT_EXIST = 1;
        INSTANCE_DELETED = 2;
        OTHER = 3;
    }
    map<string, ErrorCode> instance_errors = 1;
}

message StartRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message StartReply {
    string log_line = 1;
    string reply_message = 2;
    UpdateInfo update_info = 3;
}

message StopRequest {
    InstanceNames instance_names = 1;
    int32 time_minutes = 2;
    bool cancel_shutdown = 3;
    int32 verbosity_level = 4;
}

message StopReply {
    string log_line = 1;
}

message SuspendRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message SuspendReply {
    string log_line = 1;
}

message RestartRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message RestartReply {
    string log_line = 1;
    string reply_message = 2;
    UpdateInfo update_info = 3;
}

message DeleteRequest {
    InstanceNames instance_names = 1;
    bool purge = 2;
    int32 verbosity_level = 3;
}

message DeleteReply {
    string log_line = 1;
}

message UmountRequest {
    repeated TargetPathInfo target_paths = 1;
    int32 verbosity_level = 2;
}

message UmountReply {
    string log_line = 1;
}

message VersionRequest {
    int32 verbosity_level = 1;
}

message VersionReply {
    string version = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}
