# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import multipass_pb2 as multipass__pb2


class RpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_stream(
                '/multipass.Rpc/create',
                request_serializer=multipass__pb2.LaunchRequest.SerializeToString,
                response_deserializer=multipass__pb2.LaunchReply.FromString,
                )
        self.launch = channel.unary_stream(
                '/multipass.Rpc/launch',
                request_serializer=multipass__pb2.LaunchRequest.SerializeToString,
                response_deserializer=multipass__pb2.LaunchReply.FromString,
                )
        self.purge = channel.unary_stream(
                '/multipass.Rpc/purge',
                request_serializer=multipass__pb2.PurgeRequest.SerializeToString,
                response_deserializer=multipass__pb2.PurgeReply.FromString,
                )
        self.find = channel.unary_stream(
                '/multipass.Rpc/find',
                request_serializer=multipass__pb2.FindRequest.SerializeToString,
                response_deserializer=multipass__pb2.FindReply.FromString,
                )
        self.info = channel.unary_stream(
                '/multipass.Rpc/info',
                request_serializer=multipass__pb2.InfoRequest.SerializeToString,
                response_deserializer=multipass__pb2.InfoReply.FromString,
                )
        self.list = channel.unary_stream(
                '/multipass.Rpc/list',
                request_serializer=multipass__pb2.ListRequest.SerializeToString,
                response_deserializer=multipass__pb2.ListReply.FromString,
                )
        self.networks = channel.unary_stream(
                '/multipass.Rpc/networks',
                request_serializer=multipass__pb2.NetworksRequest.SerializeToString,
                response_deserializer=multipass__pb2.NetworksReply.FromString,
                )
        self.mount = channel.unary_stream(
                '/multipass.Rpc/mount',
                request_serializer=multipass__pb2.MountRequest.SerializeToString,
                response_deserializer=multipass__pb2.MountReply.FromString,
                )
        self.ping = channel.unary_unary(
                '/multipass.Rpc/ping',
                request_serializer=multipass__pb2.PingRequest.SerializeToString,
                response_deserializer=multipass__pb2.PingReply.FromString,
                )
        self.recover = channel.unary_stream(
                '/multipass.Rpc/recover',
                request_serializer=multipass__pb2.RecoverRequest.SerializeToString,
                response_deserializer=multipass__pb2.RecoverReply.FromString,
                )
        self.ssh_info = channel.unary_stream(
                '/multipass.Rpc/ssh_info',
                request_serializer=multipass__pb2.SSHInfoRequest.SerializeToString,
                response_deserializer=multipass__pb2.SSHInfoReply.FromString,
                )
        self.start = channel.unary_stream(
                '/multipass.Rpc/start',
                request_serializer=multipass__pb2.StartRequest.SerializeToString,
                response_deserializer=multipass__pb2.StartReply.FromString,
                )
        self.stop = channel.unary_stream(
                '/multipass.Rpc/stop',
                request_serializer=multipass__pb2.StopRequest.SerializeToString,
                response_deserializer=multipass__pb2.StopReply.FromString,
                )
        self.suspend = channel.unary_stream(
                '/multipass.Rpc/suspend',
                request_serializer=multipass__pb2.SuspendRequest.SerializeToString,
                response_deserializer=multipass__pb2.SuspendReply.FromString,
                )
        self.restart = channel.unary_stream(
                '/multipass.Rpc/restart',
                request_serializer=multipass__pb2.RestartRequest.SerializeToString,
                response_deserializer=multipass__pb2.RestartReply.FromString,
                )
        self.delet = channel.unary_stream(
                '/multipass.Rpc/delet',
                request_serializer=multipass__pb2.DeleteRequest.SerializeToString,
                response_deserializer=multipass__pb2.DeleteReply.FromString,
                )
        self.umount = channel.unary_stream(
                '/multipass.Rpc/umount',
                request_serializer=multipass__pb2.UmountRequest.SerializeToString,
                response_deserializer=multipass__pb2.UmountReply.FromString,
                )
        self.version = channel.unary_stream(
                '/multipass.Rpc/version',
                request_serializer=multipass__pb2.VersionRequest.SerializeToString,
                response_deserializer=multipass__pb2.VersionReply.FromString,
                )


class RpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def launch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def purge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def networks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recover(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ssh_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def suspend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def umount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_stream_rpc_method_handler(
                    servicer.create,
                    request_deserializer=multipass__pb2.LaunchRequest.FromString,
                    response_serializer=multipass__pb2.LaunchReply.SerializeToString,
            ),
            'launch': grpc.unary_stream_rpc_method_handler(
                    servicer.launch,
                    request_deserializer=multipass__pb2.LaunchRequest.FromString,
                    response_serializer=multipass__pb2.LaunchReply.SerializeToString,
            ),
            'purge': grpc.unary_stream_rpc_method_handler(
                    servicer.purge,
                    request_deserializer=multipass__pb2.PurgeRequest.FromString,
                    response_serializer=multipass__pb2.PurgeReply.SerializeToString,
            ),
            'find': grpc.unary_stream_rpc_method_handler(
                    servicer.find,
                    request_deserializer=multipass__pb2.FindRequest.FromString,
                    response_serializer=multipass__pb2.FindReply.SerializeToString,
            ),
            'info': grpc.unary_stream_rpc_method_handler(
                    servicer.info,
                    request_deserializer=multipass__pb2.InfoRequest.FromString,
                    response_serializer=multipass__pb2.InfoReply.SerializeToString,
            ),
            'list': grpc.unary_stream_rpc_method_handler(
                    servicer.list,
                    request_deserializer=multipass__pb2.ListRequest.FromString,
                    response_serializer=multipass__pb2.ListReply.SerializeToString,
            ),
            'networks': grpc.unary_stream_rpc_method_handler(
                    servicer.networks,
                    request_deserializer=multipass__pb2.NetworksRequest.FromString,
                    response_serializer=multipass__pb2.NetworksReply.SerializeToString,
            ),
            'mount': grpc.unary_stream_rpc_method_handler(
                    servicer.mount,
                    request_deserializer=multipass__pb2.MountRequest.FromString,
                    response_serializer=multipass__pb2.MountReply.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=multipass__pb2.PingRequest.FromString,
                    response_serializer=multipass__pb2.PingReply.SerializeToString,
            ),
            'recover': grpc.unary_stream_rpc_method_handler(
                    servicer.recover,
                    request_deserializer=multipass__pb2.RecoverRequest.FromString,
                    response_serializer=multipass__pb2.RecoverReply.SerializeToString,
            ),
            'ssh_info': grpc.unary_stream_rpc_method_handler(
                    servicer.ssh_info,
                    request_deserializer=multipass__pb2.SSHInfoRequest.FromString,
                    response_serializer=multipass__pb2.SSHInfoReply.SerializeToString,
            ),
            'start': grpc.unary_stream_rpc_method_handler(
                    servicer.start,
                    request_deserializer=multipass__pb2.StartRequest.FromString,
                    response_serializer=multipass__pb2.StartReply.SerializeToString,
            ),
            'stop': grpc.unary_stream_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=multipass__pb2.StopRequest.FromString,
                    response_serializer=multipass__pb2.StopReply.SerializeToString,
            ),
            'suspend': grpc.unary_stream_rpc_method_handler(
                    servicer.suspend,
                    request_deserializer=multipass__pb2.SuspendRequest.FromString,
                    response_serializer=multipass__pb2.SuspendReply.SerializeToString,
            ),
            'restart': grpc.unary_stream_rpc_method_handler(
                    servicer.restart,
                    request_deserializer=multipass__pb2.RestartRequest.FromString,
                    response_serializer=multipass__pb2.RestartReply.SerializeToString,
            ),
            'delet': grpc.unary_stream_rpc_method_handler(
                    servicer.delet,
                    request_deserializer=multipass__pb2.DeleteRequest.FromString,
                    response_serializer=multipass__pb2.DeleteReply.SerializeToString,
            ),
            'umount': grpc.unary_stream_rpc_method_handler(
                    servicer.umount,
                    request_deserializer=multipass__pb2.UmountRequest.FromString,
                    response_serializer=multipass__pb2.UmountReply.SerializeToString,
            ),
            'version': grpc.unary_stream_rpc_method_handler(
                    servicer.version,
                    request_deserializer=multipass__pb2.VersionRequest.FromString,
                    response_serializer=multipass__pb2.VersionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multipass.Rpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/create',
            multipass__pb2.LaunchRequest.SerializeToString,
            multipass__pb2.LaunchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def launch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/launch',
            multipass__pb2.LaunchRequest.SerializeToString,
            multipass__pb2.LaunchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def purge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/purge',
            multipass__pb2.PurgeRequest.SerializeToString,
            multipass__pb2.PurgeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/find',
            multipass__pb2.FindRequest.SerializeToString,
            multipass__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/info',
            multipass__pb2.InfoRequest.SerializeToString,
            multipass__pb2.InfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/list',
            multipass__pb2.ListRequest.SerializeToString,
            multipass__pb2.ListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def networks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/networks',
            multipass__pb2.NetworksRequest.SerializeToString,
            multipass__pb2.NetworksReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/mount',
            multipass__pb2.MountRequest.SerializeToString,
            multipass__pb2.MountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multipass.Rpc/ping',
            multipass__pb2.PingRequest.SerializeToString,
            multipass__pb2.PingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/recover',
            multipass__pb2.RecoverRequest.SerializeToString,
            multipass__pb2.RecoverReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ssh_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/ssh_info',
            multipass__pb2.SSHInfoRequest.SerializeToString,
            multipass__pb2.SSHInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/start',
            multipass__pb2.StartRequest.SerializeToString,
            multipass__pb2.StartReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/stop',
            multipass__pb2.StopRequest.SerializeToString,
            multipass__pb2.StopReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def suspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/suspend',
            multipass__pb2.SuspendRequest.SerializeToString,
            multipass__pb2.SuspendReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/restart',
            multipass__pb2.RestartRequest.SerializeToString,
            multipass__pb2.RestartReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/delet',
            multipass__pb2.DeleteRequest.SerializeToString,
            multipass__pb2.DeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def umount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/umount',
            multipass__pb2.UmountRequest.SerializeToString,
            multipass__pb2.UmountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/multipass.Rpc/version',
            multipass__pb2.VersionRequest.SerializeToString,
            multipass__pb2.VersionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
